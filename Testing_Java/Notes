
  Size of data types::
              DATA TYPE   SIZE    PRIMITIVE/REFERENCE         VALUE
              boolean     1 bit        primitive           true or false
              byte        1 byte       primitive           -128 to 127
              short       2 bytes      primitive          -32,768 to 32,767
              int         4 bytes      primitive          -2 billion to 2 billion
              long        8 bytes      primitive          -9 quintillion to 9 quintillion
              float       4 bytes      primitive          fractional number up to 6-7 digits
              double      8 bytes      primitive          fractoinal number up to 15 digits
              char        2 bytes      primitive          single character/letter/ASCII value
              String      varies       reference          a sequence of chars
 
 
 
    Primitive            vs              Reference::
    8 types                            unlimited (user defined)
    stores data                        stores an address
    can only hold 1 value              could hold more than 1 value
    less memory                        more memory
    fast                               slower
 
 
 GUI JOptionPane::
    - import the javax.swing.JOptionPane

    Methods: 
        showInputDialog("") - this needs to be accessed statically it
            shows the text inside the method and then allows for some sort of input 
        showMessageDialog("") - needs to be accessed statically, it 
            shows the text inside of the method 
        Both have an 'OK' button and the showInputDialog has an additional 'Cancel' button

 Math Methods::
    Method               Signature                          Description
    abs                int    abs(int x)                    Returns the absolute value of x
    abs                double abs(double x)                 Returns the absolute value of x
    pow                double pow(double b, double e)       Returns b to the power of e
    sqrt               double sqrt(double x)                Returns the square root of x
    ceil               double ceil(double x)                Returns next highest whole # from x
    floor              double floor(double x)               Returns next lowest whole # from x
    min                double min(double a, double b)       Returns the smaller # between a and b (double)
    max                double max(double a, double b)       Returns the larger # between a and b  (double)
    min                int    min(double a, double b)       Returns the smaller # between a and b (int)
    max                int    max(int a, int b)             Returns the larger # between a and b  (int)
    random             double random()                      Returns a random double (range: 0 <= r < 1)
    round              long   round(double x)               Returns x rounded to the nearest whole #
    PI                 double PI                            Returns 3.141592653589793
    log                double log(double x)                 Returns log base e of x 
    sin                double sin(double a)                 Returns the sine of angle a (a is in radians)   
    cos                double cos(double a)                 Returns the cosine of angle a (a is in radians)
    tan                double tan(double a)                 Returns the tangent of angle a (a is in radians) 
    asin               double asin(double x)                Returns the arcsine of x (in range of -PI/2 to PI/2)
    acos               double acos(double x)                Returns the arccosine of x (in range of 0 to PI)
    atan               double atan(double x)                Returns the tangent of x (in range of -PI/2 to PI/2)
    toDegrees          double toDegrees(double angRad)      Converts radians to degrees
    toRadians          double toRadians(double angDeg)      Converts degrees to radians 
    
 Sets when discussing Integers::
 
      Sets and lists are from the Collection interface
      LinkedHash sets do not order the what is inside the set at all
      Hash sets go by numerical value for ordering numbers 
      Tree sets go by literal value for ordering numbers,
      then whichever of the alphabet that comes first (A or a whichever is added first comes first)
      then by symbols 
 
 Sets when discussing Strings:: 
 
      HashSets order by the hash code of the string
      LinkedHash Sets get printed in the order they were added
      Tree Sets order by tree data structure (smallest ascii # to largest)
    
 Methods for Sets:: 
 
      .add(element) - adds element to the set at next available index
      .size() gets the length/ size of the set
      .remove(element) removes all of a specific value from your set
      .contains(element) returns a boolean
      .clear() clears a list of all items in the set
      .isEmpty() returns a boolean, true if the set is empty and false if the set has items in it
 
 Methods for ArrayLists::
 
      .add(element) - adds element to list at next available index
      .get(index) - gets an element from a specific index
      .set(index,element) - sets a specific index to the input element
      .subList(startIndex, endIndex) - gets the elements between the indicies (startIndex inclusive, endIndex exclusive)
 
 Maps::
 
    **You cannot have two of the same keys for a map but you can have the same element with accessed through different keys**
        *When printing map.get(element) and that element doesn't exist, it prints out "null" *
 
      HashMaps:
             - does not return in order, prints in order of smallest HashCode to largest
             - Sort of the same ordering as Hash Sets
             - keys and elements do not have to have the same data types
 
      TreeMaps:
             - prints in order of smallest ascii value to largest
             - keys and elements have to have the same data type
 
      LinkedHashMaps:
             - prints in order they are "put"
             - keys and elements do not have to have the same data types
 
 Methods for Maps::
 
      .put(key,element) - associates a specific element with a specific key
      .get(key) - gets the element associated with the key
      .containsValue(element) - returns true or false depending on if the map contains that element
      .containsKey(key) - returns true or false depending on if the map contains that key
      .values() - returns all the values of the map
      .clear() - clears the map of all keys and elements
      .remove() - removes the element associated with the key from the map
 
 Methods for Arrays(the object not the type of data)::
      .sort(reference,optional: startIndex,endIndex) - sorts the array, sorts the array from the specified index, exclusive
      
 
